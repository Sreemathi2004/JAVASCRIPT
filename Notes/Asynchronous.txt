//***********PROMISE************

drawback of callbck we move on to promise 


 there are 3 states in promises

        pending
        fulfilled
        rejected

A callback used to initialize the promise. This callback is passed two arguments: a resolve callback used to resolve the promise with a value or the result of another promise, and a reject callback used to reject the promise with a provided reason or error.


const mypromise=new Promise((resolve,reject)=>{
    const error=true;
    if(!error){
        resolve("Yes! resolved the promise")
    }
    else{
        reject("No! rejected the promise")
    }
})

console.log(mypromise);
mypromise.then(value=>console.log(value+"  welcome")).catch(err=>{
    console.log(err);
})

/***************************

const mypromise=new Promise((resolve,reject)=>{
    const error=false;
    if(!error){
        resolve("Yes! resolved the promise")
    }
    else{
        reject("No! rejected the promise")
    }
})


const myNextPromise=new Promise((resolve,reject)=>{
    setTimeout(function(){
        resolve("myNextPromise resolved")
    },3000)
})

myNextPromise.then(value=>console.log(value))
mypromise.then(value=>console.log(value))

//*************************************

const users=fetch("https://jsonplaceholder.typicode.com/users").then(response=>{
    return response.json()
}).then(users=>{
    console.log(users);
})


//**********************************


Promises uh overcome panni vanthathutha async and await


const users=async()=>{
    const response = await fetch("https://jsonplaceholder.typicode.com/users")

    const userData=await response.json()
    console.log(userData);

}
users();

//*****************************
const users=async()=>{
    const response = await fetch("https://jsonplaceholder.typicode.com/users")

    const userData=await response.json()
    return userData

}

const anotherFunction =async()=>{
    const data=await users();
    console.log(data);
}

anotherFunction();

//******************************
ANOTHER METHOD 


const myUsers={
    userList:[]
}
const users=async()=>{
    const response = await fetch("https://jsonplaceholder.typicode.com/users")

    const userData=await response.json()
    anotherFunction(userData);
    return userData

}

const anotherFunction =async(data)=>{
   myUsers.userList=data;
   console.log(myUsers.userList);
}

users();
console.log(myUsers);

//*******************************

const getDadJoke=async()=>{
    const response=await fetch("https://icanhazdadjoke.com/",{
        method:"GET",
        headers:{
            Accept:"application/json"
        }
    })
    const jsonJokeData=await response.json()
    console.log(jsonJokeData);
}

getDadJoke();

//***************************

const getDadJoke=async()=>{
    const response=await fetch("https://icanhazdadjoke.com/",{
        method:"GET",
        headers:{
            Accept:"application/json"
        }
    })
    const jsonJokeData=await response.json();
    console.log(jsonJokeData.joke);
}

getDadJoke();

//*****************************

const getDadJoke=async()=>{
    const response=await fetch("https://icanhazdadjoke.com/",{
        method:"GET",
        headers:{
            Accept:"text/plain"
        }
    })
    const jsonJokeData=await response.text();
    console.log(jsonJokeData);
}

getDadJoke();

//*******************************

